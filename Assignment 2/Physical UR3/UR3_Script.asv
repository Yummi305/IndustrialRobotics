%% Connect

% rosshutdown;

rosinit('192.168.27.1'); % If unsure, please ask a tutor

jointStateSubscriber = rossubscriber('joint_states','sensor_msgs/JointState');

 

%% Position 1 starting

jointStateSubscriber = rossubscriber('joint_states','sensor_msgs/JointState');

pause(2); % Pause to give time for a message to appear

currentJointState_321456 = (jointStateSubscriber.LatestMessage.Position)'; % Note the default order of the joints is 3,2,1,4,5,6

currentJointState_123456 = [currentJointState_321456(3:-1:1),currentJointState_321456(4:6)];

 

% jointStateSubscriber.LatestMessage

 

jointNames = {'shoulder_pan_joint','shoulder_lift_joint', 'elbow_joint', 'wrist_1_joint', 'wrist_2_joint', 'wrist_3_joint'};

 

[client, goal] = rosactionclient('/scaled_pos_joint_traj_controller/follow_joint_trajectory');

goal.Trajectory.JointNames = jointNames;

goal.Trajectory.Header.Seq = 1;

goal.Trajectory.Header.Stamp = rostime('Now','system');

goal.GoalTimeTolerance = rosduration(0.05);

bufferSeconds = 1; % This allows for the time taken to send the message. If the network is fast, this could be reduced.

durationSeconds = 5; % This is how many seconds the movement will take

 

startJointSend = rosmessage('trajectory_msgs/JointTrajectoryPoint');

startJointSend.Positions = currentJointState_123456;

startJointSend.TimeFromStart = rosduration(0);     

      

endJointSend = rosmessage('trajectory_msgs/JointTrajectoryPoint');

nextJointState_123456 = [0.2398 --0.1439 -1.2950 -1.9665 0.8154 0];

endJointSend.Positions = nextJointState_123456;

endJointSend.TimeFromStart = rosduration(durationSeconds);

 

goal.Trajectory.Points = [startJointSend; endJointSend];

goal.Trajectory.Header.Stamp = jointStateSubscriber.LatestMessage.Header.Stamp + rosduration(bufferSeconds);

 

sendGoal(client,goal);

 

 

 

%% Position 2  move towards orange (distance away)

jointStateSubscriber = rossubscriber('joint_states','sensor_msgs/JointState');

pause(2); % Pause to give time for a message to appear

currentJointState_321456 = (jointStateSubscriber.LatestMessage.Position)'; % Note the default order of the joints is 3,2,1,4,5,6

currentJointState_123456 = [currentJointState_321456(3:-1:1),currentJointState_321456(4:6)];

 

jointStateSubscriber.LatestMessage

 

jointNames = {'shoulder_pan_joint','shoulder_lift_joint', 'elbow_joint', 'wrist_1_joint', 'wrist_2_joint', 'wrist_3_joint'};

 

[client, goal] = rosactionclient('/scaled_pos_joint_traj_controller/follow_joint_trajectory');

goal.Trajectory.JointNames = jointNames;

goal.Trajectory.Header.Seq = 1;

goal.Trajectory.Header.Stamp = rostime('Now','system');

goal.GoalTimeTolerance = rosduration(0.05);

bufferSeconds = 1; % This allows for the time taken to send the message. If the network is fast, this could be reduced.

durationSeconds = 5; % This is how many seconds the movement will take

 

startJointSend = rosmessage('trajectory_msgs/JointTrajectoryPoint');

startJointSend.Positions = currentJointState_123456;

startJointSend.TimeFromStart = rosduration(0);     

      

endJointSend = rosmessage('trajectory_msgs/JointTrajectoryPoint');

nextJointState_123456 = [1.3708 -0.6465 -1.1693 0.7981 0.0614 0];

endJointSend.Positions = nextJointState_123456;

endJointSend.TimeFromStart = rosduration(durationSeconds);

 

goal.Trajectory.Points = [startJointSend; endJointSend];

goal.Trajectory.Header.Stamp = jointStateSubscriber.LatestMessage.Header.Stamp + rosduration(bufferSeconds);

 

sendGoal(client,goal);

 

%% Position 3 move into orange

jointStateSubscriber = rossubscriber('joint_states','sensor_msgs/JointState');

pause(2); % Pause to give time for a message to appear

currentJointState_321456 = (jointStateSubscriber.LatestMessage.Position)'; % Note the default order of the joints is 3,2,1,4,5,6

currentJointState_123456 = [currentJointState_321456(3:-1:1),currentJointState_321456(4:6)];

 

jointStateSubscriber.LatestMessage

 

jointNames = {'shoulder_pan_joint','shoulder_lift_joint', 'elbow_joint', 'wrist_1_joint', 'wrist_2_joint', 'wrist_3_joint'};

 

[client, goal] = rosactionclient('/scaled_pos_joint_traj_controller/follow_joint_trajectory');

goal.Trajectory.JointNames = jointNames;

goal.Trajectory.Header.Seq = 1;

goal.Trajectory.Header.Stamp = rostime('Now','system');

goal.GoalTimeTolerance = rosduration(0.05);

bufferSeconds = 1; % This allows for the time taken to send the message. If the network is fast, this could be reduced.

durationSeconds = 5; % This is how many seconds the movement will take

 

startJointSend = rosmessage('trajectory_msgs/JointTrajectoryPoint');

startJointSend.Positions = currentJointState_123456;

startJointSend.TimeFromStart = rosduration(0);     

      

endJointSend = rosmessage('trajectory_msgs/JointTrajectoryPoint');

nextJointState_123456 = [1.6787 -0.7194 1.0072 -1.6787 -1.2950 0];

endJointSend.Positions = nextJointState_123456;

endJointSend.TimeFromStart = rosduration(durationSeconds);

 

goal.Trajectory.Points = [startJointSend; endJointSend];

goal.Trajectory.Header.Stamp = jointStateSubscriber.LatestMessage.Header.Stamp + rosduration(bufferSeconds);

 

sendGoal(client,goal);


%% Position 4 Grip




%% Position 5 move away from orange

jointStateSubscriber = rossubscriber('joint_states','sensor_msgs/JointState');

pause(2); % Pause to give time for a message to appear

currentJointState_321456 = (jointStateSubscriber.LatestMessage.Position)'; % Note the default order of the joints is 3,2,1,4,5,6

currentJointState_123456 = [currentJointState_321456(3:-1:1),currentJointState_321456(4:6)];

 

jointStateSubscriber.LatestMessage

 

jointNames = {'shoulder_pan_joint','shoulder_lift_joint', 'elbow_joint', 'wrist_1_joint', 'wrist_2_joint', 'wrist_3_joint'};

 

[client, goal] = rosactionclient('/scaled_pos_joint_traj_controller/follow_joint_trajectory');

goal.Trajectory.JointNames = jointNames;

goal.Trajectory.Header.Seq = 1;

goal.Trajectory.Header.Stamp = rostime('Now','system');

goal.GoalTimeTolerance = rosduration(0.05);

bufferSeconds = 1; % This allows for the time taken to send the message. If the network is fast, this could be reduced.

durationSeconds = 5; % This is how many seconds the movement will take

 

startJointSend = rosmessage('trajectory_msgs/JointTrajectoryPoint');

startJointSend.Positions = currentJointState_123456;

startJointSend.TimeFromStart = rosduration(0);     

      

endJointSend = rosmessage('trajectory_msgs/JointTrajectoryPoint');

nextJointState_123456 = [1.6787 -0.7194 1.0072 -1.6787 -1.2950 0];

endJointSend.Positions = nextJointState_123456;

endJointSend.TimeFromStart = rosduration(durationSeconds);

 

goal.Trajectory.Points = [startJointSend; endJointSend];

goal.Trajectory.Header.Stamp = jointStateSubscriber.LatestMessage.Header.Stamp + rosduration(bufferSeconds);

 

sendGoal(client,goal);

%% Position 6 prep to place

jointStateSubscriber = rossubscriber('joint_states','sensor_msgs/JointState');

pause(2); % Pause to give time for a message to appear

currentJointState_321456 = (jointStateSubscriber.LatestMessage.Position)'; % Note the default order of the joints is 3,2,1,4,5,6

currentJointState_123456 = [currentJointState_321456(3:-1:1),currentJointState_321456(4:6)];

 

jointStateSubscriber.LatestMessage

 

jointNames = {'shoulder_pan_joint','shoulder_lift_joint', 'elbow_joint', 'wrist_1_joint', 'wrist_2_joint', 'wrist_3_joint'};

 

[client, goal] = rosactionclient('/scaled_pos_joint_traj_controller/follow_joint_trajectory');

goal.Trajectory.JointNames = jointNames;

goal.Trajectory.Header.Seq = 1;

goal.Trajectory.Header.Stamp = rostime('Now','system');

goal.GoalTimeTolerance = rosduration(0.05);

bufferSeconds = 1; % This allows for the time taken to send the message. If the network is fast, this could be reduced.

durationSeconds = 5; % This is how many seconds the movement will take

 

startJointSend = rosmessage('trajectory_msgs/JointTrajectoryPoint');

startJointSend.Positions = currentJointState_123456;

startJointSend.TimeFromStart = rosduration(0);     

      

endJointSend = rosmessage('trajectory_msgs/JointTrajectoryPoint');

nextJointState_123456 = [1.6787 -0.7194 1.0072 -1.6787 -1.2950 0];

endJointSend.Positions = nextJointState_123456;

endJointSend.TimeFromStart = rosduration(durationSeconds);

 

goal.Trajectory.Points = [startJointSend; endJointSend];

goal.Trajectory.Header.Stamp = jointStateSubscriber.LatestMessage.Header.Stamp + rosduration(bufferSeconds);

 

sendGoal(client,goal);


%% Position 7 place

jointStateSubscriber = rossubscriber('joint_states','sensor_msgs/JointState');

pause(2); % Pause to give time for a message to appear

currentJointState_321456 = (jointStateSubscriber.LatestMessage.Position)'; % Note the default order of the joints is 3,2,1,4,5,6

currentJointState_123456 = [currentJointState_321456(3:-1:1),currentJointState_321456(4:6)];

 

jointStateSubscriber.LatestMessage

 

jointNames = {'shoulder_pan_joint','shoulder_lift_joint', 'elbow_joint', 'wrist_1_joint', 'wrist_2_joint', 'wrist_3_joint'};

 

[client, goal] = rosactionclient('/scaled_pos_joint_traj_controller/follow_joint_trajectory');

goal.Trajectory.JointNames = jointNames;

goal.Trajectory.Header.Seq = 1;

goal.Trajectory.Header.Stamp = rostime('Now','system');

goal.GoalTimeTolerance = rosduration(0.05);

bufferSeconds = 1; % This allows for the time taken to send the message. If the network is fast, this could be reduced.

durationSeconds = 5; % This is how many seconds the movement will take

 

startJointSend = rosmessage('trajectory_msgs/JointTrajectoryPoint');

startJointSend.Positions = currentJointState_123456;

startJointSend.TimeFromStart = rosduration(0);     

      

endJointSend = rosmessage('trajectory_msgs/JointTrajectoryPoint');

nextJointState_123456 = [1.6787 -0.7194 1.0072 -1.6787 -1.2950 0];

endJointSend.Positions = nextJointState_123456;

endJointSend.TimeFromStart = rosduration(durationSeconds);

 

goal.Trajectory.Points = [startJointSend; endJointSend];

goal.Trajectory.Header.Stamp = jointStateSubscriber.LatestMessage.Header.Stamp + rosduration(bufferSeconds);

 

sendGoal(client,goal);

%% Position 8 Release Grip



